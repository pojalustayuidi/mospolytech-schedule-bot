import requests
import json
import logging
from typing import Dict, Any
from config.settings import BASE_URL, API_URL, HEADERS, SCHEDULE_TIMES, WEEK_DAYS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

def fetch_schedule(group: str, session: str = "0") -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ API rasp.dmami.ru.

    Args:
        group (str): –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "241-335").
        session (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0").

    Returns:
        Dict[str, Any]: –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    Raises:
        requests.HTTPError: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π HTTP.
        ValueError: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    params = {"group": group, "session": session}
    session = requests.Session()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logger.info("–ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        response = session.get(BASE_URL, headers=HEADERS, timeout=10)
        response.raise_for_status()

        # –ó–∞–ø—Ä–æ—Å –∫ API
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}...")
        response = session.get(API_URL, params=params, headers=HEADERS, timeout=10)
        response.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        content_type = response.headers.get("Content-Type", "")
        logger.info(f"Content-Type –æ—Ç–≤–µ—Ç–∞: {content_type}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ JSON
        if "application/json" not in content_type.lower():
            logger.error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:")
            logger.error(response.text)
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è JSON, –Ω–æ –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç")

        # –ü–∞—Ä—Å–∏–º JSON
        data = response.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑
        if isinstance(data, str):
            logger.warning("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑...")
            data = json.loads(data)

        return data

    except requests.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e} (–ö–æ–¥: {response.status_code})")
        logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        raise
    except ValueError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
        logger.error(response.text)
        raise
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

def format_schedule(data: Dict[str, Any], selected_day: str = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥.

    Args:
        data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ API.
        selected_day (str, optional): –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1").

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    if not isinstance(data, dict):
        logger.error(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –Ω–æ –ø–æ–ª—É—á–µ–Ω: {type(data)}")
        raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

    if data.get("status") != "ok":
        return "–û—à–∏–±–∫–∞: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    grid = data.get("grid", {})
    if not grid:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."

    formatted = []
    days_to_process = [selected_day] if selected_day else grid.keys()

    for day in days_to_process:
        pairs = grid.get(day, {})
        if not pairs or not any(pairs.values()):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–Ω–∏ –±–µ–∑ –ø–∞—Ä
            continue

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–∑ WEEK_DAYS
        day_name = WEEK_DAYS.get(day, f"–î–µ–Ω—å {day}")
        formatted.append(f"üìÖ {day_name}:")
        for pair_num, lessons in pairs.items():
            if not lessons:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä—ã
                continue

            time = SCHEDULE_TIMES.get(pair_num, "N/A")
            formatted.append(f"  üïí {time} (–ü–∞—Ä–∞ {pair_num}):")
            for lesson in lessons:
                if not isinstance(lesson, dict):
                    logger.error(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–Ω—è—Ç–∏—è, –Ω–æ –ø–æ–ª—É—á–µ–Ω: {type(lesson)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {lesson}")
                    continue

                subject = lesson.get("sbj", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                teacher = lesson.get("teacher", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                location = lesson.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                lesson_type = lesson.get("type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                dts = lesson.get("dts", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                formatted.append(f"    üìñ {subject} ({lesson_type})")
                formatted.append(f"    üë®‚Äçüè´ {teacher}")
                formatted.append(f"    üìç {location} | üóìÔ∏è {dts}")
            formatted.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
        formatted.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏

    return "\n".join(formatted) if formatted else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."