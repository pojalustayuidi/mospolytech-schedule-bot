import requests
import json
import logging
from typing import Dict, Any
from datetime import datetime
import re
from config.settings import BASE_URL, API_URL, HEADERS, SCHEDULE_TIMES, WEEK_DAYS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
MONTHS_RU = {
    "—è–Ω–≤": 1, "—Ñ–µ–≤": 2, "–º–∞—Ä": 3, "–∞–ø—Ä": 4, "–º–∞—è": 5, "–∏—é–Ω": 6,
    "–∏—é–ª": 7, "–∞–≤–≥": 8, "—Å–µ–Ω": 9, "–æ–∫—Ç": 10, "–Ω–æ—è": 11, "–¥–µ–∫": 12
}


def fetch_schedule(group: str, session: str = "0") -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ API rasp.dmami.ru.

    Args:
        group (str): –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "241-335").
        session (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0").

    Returns:
        Dict[str, Any]: –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    Raises:
        requests.HTTPError: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π HTTP.
        ValueError: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    params = {"group": group, "session": session}
    session = requests.Session()

    try:
        logger.info("–ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        response = session.get(BASE_URL, headers=HEADERS, timeout=10)
        response.raise_for_status()

        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}...")
        response = session.get(API_URL, params=params, headers=HEADERS, timeout=10)
        response.raise_for_status()

        content_type = response.headers.get("Content-Type", "")
        logger.info(f"Content-Type –æ—Ç–≤–µ—Ç–∞: {content_type}")

        if "application/json" not in content_type.lower():
            logger.error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:")
            logger.error(response.text)
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è JSON, –Ω–æ –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç")

        data = response.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        if isinstance(data, str):
            logger.warning("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑...")
            data = json.loads(data)

        return data

    except requests.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e} (–ö–æ–¥: {response.status_code})")
        logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        raise
    except ValueError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
        logger.error(response.text)
        raise
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


def is_date_range_valid(dts: str, current_date: datetime) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ –ø–æ–ª–µ dts –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.

    Args:
        dts (str): –°—Ç—Ä–æ–∫–∞ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "03 –§–µ–≤ - 06 –ê–ø—Ä").
        current_date (datetime): –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

    Returns:
        bool: True, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ, False –∏–Ω–∞—á–µ.
    """
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: '{dts}'")
    if not dts or dts == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        logger.info("–î–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∑–∞–Ω—è—Ç–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º")
        return True

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        date_parts = [part.strip() for part in dts.split("-")]
        if len(date_parts) != 2:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: '{dts}', —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–º")
            return True

        start_str, end_str = date_parts
        current_year = current_date.year

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é: —Ñ–æ—Ä–º–∞—Ç "DD –ú–ú–ú" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "03 –§–µ–≤")
        def parse_date(date_str: str) -> datetime:
            match = re.match(r"(\d{1,2})\s+([–∞-—è–ê-–Ø]+)", date_str, re.IGNORECASE)
            if not match:
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")

            day, month_str = match.groups()
            month_str = month_str.lower()[:3]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –±—É–∫–≤—ã
            if month_str not in MONTHS_RU:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü: {month_str}")

            month = MONTHS_RU[month_str]
            day = int(day)
            return datetime(current_year, month, day)

        start_date = parse_date(start_str)
        end_date = parse_date(end_str)

        # –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        if end_date < start_date:
            end_date = end_date.replace(year=current_year + 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª—å–Ω–æ –ª–∏ –∑–∞–Ω—è—Ç–∏–µ
        is_valid = start_date.date() <= current_date.date() <= end_date.date()
        logger.info(
            f"–î–∏–∞–ø–∞–∑–æ–Ω: {start_date.date()} - {end_date.date()}, —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.date()}, –∞–∫—Ç—É–∞–ª—å–Ω–æ: {is_valid}")
        return is_valid

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç '{dts}': {e}, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–º")
        return True  # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤–∫–ª—é—á–∞–µ–º –∑–∞–Ω—è—Ç–∏–µ


def format_schedule(data: Dict[str, Any], selected_day: str = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥.

    Args:
        data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ API.
        selected_day (str, optional): –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1").

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    if not isinstance(data, dict):
        logger.error(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –Ω–æ –ø–æ–ª—É—á–µ–Ω: {type(data)}")
        raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

    if data.get("status") != "ok":
        return "–û—à–∏–±–∫–∞: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    grid = data.get("grid", {})
    if not grid:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."

    formatted = []
    current_date = datetime.now()
    logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–∞—Ç—ã: {current_date.date()}")
    days_to_process = [selected_day] if selected_day else grid.keys()

    for day in days_to_process:
        pairs = grid.get(day, {})
        if not pairs or not any(pairs.values()):
            logger.info(f"–î–µ–Ω—å {day} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

        day_name = WEEK_DAYS.get(day, f"–î–µ–Ω—å {day}")
        formatted.append(f"üìÖ {day_name}:")
        for pair_num, lessons in pairs.items():
            if not lessons:
                logger.info(f"–ü–∞—Ä–∞ {pair_num} –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            time = SCHEDULE_TIMES.get(pair_num, "N/A")
            formatted.append(f"  üïí {time} (–ü–∞—Ä–∞ {pair_num}):")
            for lesson in lessons:
                if not isinstance(lesson, dict):
                    logger.error(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–Ω—è—Ç–∏—è, –Ω–æ –ø–æ–ª—É—á–µ–Ω: {type(lesson)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {lesson}")
                    continue

                dts = lesson.get("dts", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                if not is_date_range_valid(dts, current_date):
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {lesson.get('sbj', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, –¥–∞—Ç—ã: {dts}")
                    continue

                subject = lesson.get("sbj", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                teacher = lesson.get("teacher", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                location = lesson.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                lesson_type = lesson.get("type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {subject}, –¥–∞—Ç—ã: {dts}, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}, –º–µ—Å—Ç–æ: {location}")
                formatted.append(f"    üìñ {subject} ({lesson_type})")
                formatted.append(f"    üë®‚Äçüè´ {teacher}")
                formatted.append(f"    üìç {location} | üóìÔ∏è {dts}")
            formatted.append("")
        formatted.append("")

    result = "\n".join(formatted) if formatted else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."
    logger.info(f"–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {result[:100]}... (–¥–ª–∏–Ω–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
    return result