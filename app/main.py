# import sys
# import os
# import logging
# import asyncio
# from aiogram import Bot, Dispatcher
# from aiogram.filters import Command
# from aiogram.types import Message
# from api.schedule import fetch_schedule, format_schedule
# from config.settings import TELEGRAM_TOKEN
#
# # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
# project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
# sys.path.insert(0, project_root)
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,
#     format="%(asctime)s - %(levelname)s - %(message)s"
# )
# logger = logging.getLogger(__name__)
#
# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=TELEGRAM_TOKEN)
# dp = Dispatcher()
#
#
# @dp.message(Command("start"))
# async def start(message: Message):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
#     """
#     user = message.from_user
#     await message.reply(
#         f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
#         "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ü–æ–ª–∏—Ç–µ—Ö–∞.\n"
#         "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /schedule [–≥—Ä—É–ø–ø–∞], —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 241-335).\n"
#         "–ü—Ä–∏–º–µ—Ä: /schedule 241-335"
#     )
#
#
# @dp.message(Command("schedule"))
# async def schedule(message: Message):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule.
#     –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã.
#     """
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 241-335
#     args = message.text.split(maxsplit=1)
#     group = args[1] if len(args) > 1 else "241-335"
#
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
#         schedule_data = fetch_schedule(group=group, session="0")
#         logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ API –¥–ª—è –≥—Ä—É–ø–ø—ã {group}.")
#
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
#         formatted_schedule = format_schedule(schedule_data)
#         logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         if formatted_schedule:
#             await message.reply(formatted_schedule)
#         else:
#             await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
#         await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
#
#
# async def main():
#     """
#     –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞.
#     """
#     if not TELEGRAM_TOKEN:
#         logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–≤ .env —Ñ–∞–π–ª–µ.")
#         sys.exit(1)
#
#     logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞...")
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main())