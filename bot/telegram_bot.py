import sys
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, project_root)
try:
    from api.schedule import fetch_schedule, format_schedule
except ModuleNotFoundError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    raise
from config.settings import TELEGRAM_TOKEN, WEEK_DAYS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —è–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º FSM
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ScheduleForm(StatesGroup):
    waiting_for_group = State()

def create_day_buttons() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for day_num, day_name in WEEK_DAYS.items():
        button = InlineKeyboardButton(
            text=day_name,
            callback_data=f"day_{day_num}"
        )
        keyboard.inline_keyboard.append([button])
    return keyboard

@dp.message(Command("start"))
async def start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user = message.from_user
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ü–æ–ª–∏—Ç–µ—Ö–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /schedule, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –∏–ª–∏ /schedule [–≥—Ä—É–ø–ø–∞] –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
        "–ü—Ä–∏–º–µ—Ä: /—á–µ–ø–æ–ø–∞—Ä–∞–º 241-335"
    )

@dp.message(Command("—á–µ–ø–æ–ø–∞—Ä–∞–º"))
async def schedule(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—á–µ–ø–æ–ø–∞—Ä–∞–º   .
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.
    """
    args = message.text.split(maxsplit=1)

    if len(args) > 1:
        group = args[1]
        await process_schedule(message, group, state)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 241-335):")
        await state.set_state(ScheduleForm.waiting_for_group)

@dp.message(ScheduleForm.waiting_for_group)
async def process_group(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    group = message.text.strip()
    await process_schedule(message, group, state)

async def process_schedule(message: Message, group: str, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è.
    """
    try:
        if not group.replace("-", "").isdigit():
            await message.reply("–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 241-335).")
            return

        schedule_data = fetch_schedule(group=group, session="0")
        logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ API –¥–ª—è –≥—Ä—É–ø–ø—ã {group}.")
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: user_id={message.from_user.id}, chat_id={message.chat.id}")

        await state.update_data(schedule_data=schedule_data, group=group)
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSM: group={group}, schedule_data_keys={list(schedule_data.keys())}")

        if not schedule_data.get("grid"):
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
            return

        await message.reply(
            f"–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:",
            reply_markup=create_day_buttons()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith("day_"))
async def process_day_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    """
    try:
        day_num = callback.data.split("_")[1]
        day_name = WEEK_DAYS.get(day_num, f"–î–µ–Ω—å {day_num}")

        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: user_id={callback.from_user.id}, chat_id={callback.message.chat.id}")
        user_data = await state.get_data()
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM: {user_data}")
        schedule_data = user_data.get("schedule_data")
        group = user_data.get("group")

        if not group:
            logger.warning("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ FSM")
            await callback.message.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /schedule.")
            await callback.answer()
            return

        if not schedule_data:
            logger.warning(f"–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {group}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ")
            try:
                schedule_data = fetch_schedule(group=group, session="0")
                await state.update_data(schedule_data=schedule_data, group=group)
                logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}: {e}")
                await callback.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /schedule.")
                await callback.answer()
                return

        formatted_schedule = format_schedule(schedule_data, selected_day=day_num)
        logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}, –¥–µ–Ω—å {day_name}.")

        if not formatted_schedule or formatted_schedule == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.":
            await callback.message.reply(f"–ù–∞ {day_name} –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã {group}.")
            await callback.answer()
            return

        max_length = 4000
        parts = []
        current_part = f"üìÖ {day_name} (–≥—Ä—É–ø–ø–∞ {group}):\n\n"
        for line in formatted_schedule.split("\n"):
            if len(current_part) + len(line) + 1 <= max_length:
                current_part += line + "\n"
            else:
                parts.append(current_part)
                current_part = line + "\n"
        if current_part:
            parts.append(current_part)

        for part in parts:
            try:
                await callback.message.reply(part)
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await callback.message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è: {e}")
        await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await callback.answer()

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞.
    """
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        sys.exit(1)

    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())